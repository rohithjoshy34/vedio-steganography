#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Nov 21, 2019 11:11:53 PM IST  platform: Windows NT

import sys
from tkinter import *
from tkinter import ttk
import tkinter.messagebox

import numpy as np
from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
import PIL.Image, PIL.ImageTk
import cv2

import numpy
import  math
import os
from os.path import isfile, join
import natsort
from hashlib import md5
from base64 import b64decode
from base64 import b64encode
from stegano import lsb
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import EncryptionProcess_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    EncryptionProcess_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    EncryptionProcess_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def doit(self):
        self.toframe()
        self.aesencr()
        self.tovideo()
    def msg(self):
        os.system("UI003.py")
    def qua(self):
        original = cv2.imread("C:/Users/jithu/PycharmProjects/j/MAJOR/image/frame1.png")
        contrast = cv2.imread("C:/Users/jithu/PycharmProjects/j/MAJOR/psnr.png")

        def psnr(img1, img2):
            mse = numpy.mean((img1 - img2) ** 2)
            if mse == 0:
                return 100
            PIXEL_MAX = 255.0
            return 20 * math.log10(PIXEL_MAX / math.sqrt(mse))

        d = psnr(original, contrast)
        x=str(d)
        tkinter.messagebox.showinfo(title="PSNR VALUE",message="PSNR : "+x)
    def ply(self):
        class videoGUI:
            def __init__(self, window, window_title):

                self.window = window
                self.window.title(window_title)

                top_frame = Frame(self.window)
                top_frame.pack(side=TOP, pady=5)

                bottom_frame = Frame(self.window)
                bottom_frame.pack(side=BOTTOM, pady=5)

                self.pause = False  # Parameter that controls pause button

                self.canvas = Canvas(top_frame)
                self.canvas.pack()

                # Select Button
                self.btn_select = Button(bottom_frame, text="Select video file", width=15, command=self.open_file)
                self.btn_select.grid(row=0, column=0)

                # Play Button
                self.btn_play = Button(bottom_frame, text="Play", width=15, command=self.play_video)
                self.btn_play.grid(row=0, column=1)

                # Pause Button
                self.btn_pause = Button(bottom_frame, text="Pause", width=15, command=self.pause_video)
                self.btn_pause.grid(row=0, column=2)

                # Resume Button
                self.btn_resume = Button(bottom_frame, text="resume", width=15, command=self.resume_video)
                self.btn_resume.grid(row=0, column=3)

                self.delay = 15  # ms

                self.window.mainloop()

            def open_file(self):

                self.pause = False

                self.filename = filedialog.askopenfilename(title="Select file", filetypes=(("MP4 files", "*.mp4"),
                                                                                           ("WMV files", "*.wmv"),
                                                                                           ("AVI files", "*.avi")))
                print(self.filename)

                # Open the video file
                self.cap = cv2.VideoCapture(self.filename)

                self.width = self.cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                self.height = self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)

                self.canvas.config(width=self.width, height=self.height)

            def get_frame(self):  # get only one frame

                try:

                    if self.cap.isOpened():
                        ret, frame = self.cap.read()
                        return (ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

                except:
                    messagebox.showerror(title='Video file not found', message='Please select a video file.')

            def play_video(self):

                # Get a frame from the video source, and go to the next frame automatically
                ret, frame = self.get_frame()

                if ret:
                    self.photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
                    self.canvas.create_image(0, 0, image=self.photo, anchor=NW)

                if not self.pause:
                    self.window.after(self.delay, self.play_video)

            def pause_video(self):
                self.pause = True

            # Addition
            def resume_video(self):
                self.pause = False
                self.play_video()

            # Release the video source when the object is destroyed
            def __del__(self):
                if self.cap.isOpened():
                    self.cap.release()

        ##### End Class #####

        # Create a window and pass it to videoGUI Class
        videoGUI(Tk(), "Video")

    """def sav(self):
        from tkinter.filedialog import asksaveasfile
        # import only asksaveasfile from filedialog
        # which is used to save file in any extension
        files = [('Video Files', '*.mp4'),
                     ('AVI', '*.avi'),
                     ('All Files', '*.*')]
        file = asksaveasfile(filetypes=files, defaultextension=files)
        hh=str(file)
        xx=hh.split("'")
        print(xx[1])

        #root = Tk()
        #root.geometry('200x150')
        # function to call when user press
        # the save button, a filedialog will
        # open and ask to save file
        def save():
            files = [('Video Files', '*.mp4'),
                     ('AVI', '*.avi'),
                     ('All Files', '*.*']
            file = asksaveasfile(filetypes=files, defaultextension=files)

        btn = ttk.Button(root, text='Save', command=lambda: save())
        btn.pack(side=TOP, pady=20)

        mainloop()"""
    def tovideo(self):
        # tkinter.messagebox.showerror("SAMPLE")
        fil = []
        pathIn = 'C:/Users/jithu/PycharmProjects/j/MAJOR/image/'
        from tkinter.filedialog import asksaveasfile
        # import only asksaveasfile from filedialog
        # which is used to save file in any extension
        files = [('Video Files', '*.mp4'),
                 ('AVI', '*.avi'),
                 ('All Files', '*.*')]
        file = asksaveasfile(filetypes=files, defaultextension=files)
        hh = str(file)
        pat = hh.split("'")
        print(pat[1])
        pathOut = pat[1]
        fps = 25
        frame_array = []
        files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]
        # for sorting the file names properly
        # files.sort(key=lambda x: x[5:-4])
        fil = natsort.natsorted(files, reverse=False)
        #print(fil)
        # files.sort()
        frame_array = []
        files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]
        # for sorting the file names properly
        files.sort(key=lambda x: x[5:-4])
        for i in range(len(files)-1):
            filename = pathIn + fil[i]
            # reading each files
            # print(filename)
            img = cv2.imread(filename)
            height, width, layers = img.shape
            size = (width, height)

            # inserting the frames into an image array
            frame_array.append(img)
        out = cv2.VideoWriter(pathOut, cv2.VideoWriter_fourcc(*'DIVX'), fps, size)
        for i in range(len(frame_array)):
            # writing to a image array
            out.write(frame_array[i])
        out.release()
        file = open("binpath.txt", "w+")
        file.write(pathOut)
        tkinter.messagebox.showinfo(title="Video Steganography",message="Completed!!")
    def aesencr(self):

        # tkinter.messagebox.showinfo("SAMPLE")
        class AESCipher:
            def __init__(self, key):
                self.key = md5(key.encode('utf8')).digest()

            def encrypt(self, data):
                iv = get_random_bytes(AES.block_size)
                self.cipher = AES.new(self.key, AES.MODE_CBC, iv)
                return b64encode(iv + self.cipher.encrypt(pad(data.encode('utf-8'),
                                                              AES.block_size)))

            def decrypt(self, data):
                raw = b64decode(data)
                self.cipher = AES.new(self.key, AES.MODE_CBC, raw[:AES.block_size])
                return unpad(self.cipher.decrypt(raw[AES.block_size:]), AES.block_size)

        if __name__ == '__main__':
            print('TESTING ENCRYPTION')
            file = open("bin.txt", "r+")
            a = file.read()
            b = a.split(",")
            me = b[0]
            k = b[1]
            #k = b[2]
            # fr = input("Enter the frame name with extension..:")
            # msg = input('Message...: ')
            # pwd = input('Password..: ')
            text = AESCipher(k).encrypt(me).decode('utf-8')
            print('Ciphertext:', text)
            b[2]=text
            file.close()
            file = open("bin.txt", "r+")
            for i in range(0, 2):
                file.write(b[i] + ",")
            file.write(text)
            file.close()


            secret=lsb.hide("C:/Users/jithu/PycharmProjects/j/MAJOR/image/frame1.png", text)
            sa = "psnr.png"
            secret.save("C:/Users/jithu/PycharmProjects/j/MAJOR/" + sa)
            clear_message = lsb.reveal("C:/Users/jithu/PycharmProjects/j/MAJOR/psnr.png")
            print("successfully inserted text= ", clear_message)
        tkinter.messagebox.showinfo(title="Video Steganography",message="Message Encrypted")
    def toframe(self):
        def FrameCapture(path):
            # Path to video file
            vidObj = cv2.VideoCapture(path)

            # Used as counter variable
            count = 0

            # checks whether frames were extracted
            success = 1

            while success:
                # vidObj object calls read
                # function extract frames
                success, image = vidObj.read()

                # Saves the frames with frame-count
                #cv2.imwrite("frame%d.png" % count, image)
                path = 'C:/Users/jithu/PycharmProjects/j/MAJOR/image/'
                cv2.imwrite(os.path.join(path, "frame%d.png" % count), image)

                count += 1
            pathIn = 'C:/Users/jithu/PycharmProjects/j/MAJOR/image/'
            frame_array = []
            files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]
            # for sorting the file names properly
            # files.sort(key=lambda x: x[5:-4])
            print(len(files))

            fil = natsort.natsorted(files, reverse=False)
            # files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]
            # for sorting the file names properly
            for i in range(len(files)):
                self.Listbox1.insert(i, files[i])
        # Driver Code
        if __name__ == '__main__':
            # Calling the function
            file=open("C:/Users/jithu/PycharmProjects/j/MAJOR/binpath.txt","r+")
            h=file.readline()
            print(h)
            FrameCapture(h)



        tkinter.messagebox.showinfo(title="Video Stegnography",message="Sucessfully Converted to Frames")
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Times New Roman} -size 16 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"

        top.geometry("977x817+502+51")
        top.title("Encryption Process")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.092, rely=0.33, height=62, width=222)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font=font10)
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Message''',command=self.msg)
        self.Button1.configure(width=222)

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.092, rely=0.49, height=62, width=222)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font=font10)
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Submit''',command=self.doit)

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.092, rely=0.649, height=62, width=222)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font=font10)
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Quality''',command=self.qua)

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.092, rely=0.184, height=62, width=222)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(font=font10)
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Play Video''',command=self.ply)

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(relx=0.461, rely=0.314, relheight=0.299, relwidth=0.414)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#aebfbe")
        self.Listbox1.configure(exportselection="0")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(width=404)

        #self.Text1 = tk.Text(top)
        #self.Text1.place(relx=0.461, rely=0.171, relheight=0.299, relwidth=0.414)

        #self.Text1.configure(background="white")
        #self.Text1.configure(font="TkTextFont")
        #self.Text1.configure(foreground="black")
        #self.Text1.configure(highlightbackground="#d9d9d9")
        #self.Text1.configure(highlightcolor="black")
        #self.Text1.configure(insertbackground="black")
        #self.Text1.configure(selectbackground="#c4c4c4")
        #self.Text1.configure(selectforeground="black")
        #self.Text1.configure(width=404)
        #self.Text1.configure(wrap="word")

if __name__ == '__main__':
    vp_start_gui()





